openapi: 3.0.0
info:
  title: Product Microservice API
  description: API for managing product information with CRUD operations
  version: '1.0.0'
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.example.com/v1
    description: Production server

tags:
  - name: Products
    description: Product management endpoints

paths:
  /products:
    get:
      tags:
        - Products
      summary: List all products
      description: Retrieve a list of all available products
      operationId: listProducts
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the system
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    parameters:
      - name: id
        in: path
        description: Unique identifier of the product
        required: true
        schema:
          type: string
    
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its unique identifier
      operationId: getProduct
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product's information
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Products
      summary: Delete product
      description: Remove a specific product from the system
      operationId: deleteProduct
      responses:
        '204':
          description: Product deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the product
          example: "Wireless Headphones"
        price:
          type: number
          format: float
          description: Price of the product
          minimum: 0
          example: 99.99
        description:
          type: string
          description: Brief description of the product
          example: "High-quality wireless headphones with noise cancellation"
      required:
        - id
        - name
        - price

    ProductCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the product
          example: "Wireless Headphones"
        price:
          type: number
          format: float
          description: Price of the product
          minimum: 0
          example: 99.99
        description:
          type: string
          description: Brief description of the product
          example: "High-quality wireless headphones with noise cancellation"
      required:
        - name
        - price

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Error message
          example: "Invalid input provided"
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
